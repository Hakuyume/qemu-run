#! /usr/bin/env python3

import argparse
import hashlib
import os
import random
import yaml


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dry-run', action='store_true')
    parser.add_argument('config')
    args = parser.parse_args()

    config = yaml.load(open(args.config))

    params = list()

    if 'name' not in config:
        config['name'] = 'vm{:04x}'.format(random.randrange(1 << 16))
    params.extend(('-name', config['name']))
    params.extend((
        '-monitor',
        'unix:/tmp/qemu-monitor-{:s}.sock,server,nowait'
        .format(config['name'])))

    if config.get('uefi', False):
        params.extend(('-bios', '/usr/share/ovmf/ovmf_code_x64.bin'))

    if 'cpu' in config:
        cpu = config['cpu']
        if cpu.get('kvm', False):
            params.extend(('-enable-kvm',))
        if 'type' in cpu:
            params.extend(('-cpu', cpu['type']))
        if 'cores' in cpu:
            params.extend((
                '-smp',
                'sockets=1,cores={:d}'.format(cpu['cores'])))

    if 'memory' in config:
        params.extend(('-m', config['memory']))

    if 'drive' in config:
        for drive in config['drive']:
            drive_params = list()
            if 'file' in drive:
                if not os.path.isabs(drive['file']):
                    drive['file'] = os.path.join(
                        os.path.dirname(os.path.abspath(args.config)),
                        drive['file'])
                drive_params.append('file={:s}'.format(drive['file']))

            if drive.get('discard', False):
                drive_params.append('discard=on')

            if 'format' in drive:
                drive_params.append('format={:s}'.format(drive['format']))

            params.extend(('-drive', ','.join(drive_params)))

    if 'network' in config:
        vlan = 0
        for network in config['network']:
            key = '{:s}:{:d}'.format(config['name'], vlan).encode()
            macaddr = (0x52, 0x54, *hashlib.sha256(key).digest()[:4])
            macaddr = ':'.join(('{:02x}',) * 6).format(*macaddr)

            params.extend((
                '-net',
                'nic,vlan={:d},macaddr={:s}'.format(vlan, macaddr)))

            if 'bridge' in network:
                params.extend((
                    '-net',
                    'bridge,vlan={:d},br={:s}'
                    .format(vlan, network['bridge'])))
            else:
                raise ValueError('Unknown NIC Type')

            vlan += 1

    if config.get('spice', False):
        params.extend(('-vga', 'qxl'))
        params.extend((
            '-spice',
            'disable-ticketing,unix,addr=/tmp/qemu-spice-{:s}.sock'
            .format(config['name'])))

    if config.get('sound', False):
        params.extend(('-device', 'intel-hda'))
        params.extend(('-device', 'hda-micro'))

    if config.get('guest', False):
        params.extend(('-device', 'virtio-serial-pci'))
        params.extend((
            '-device',
            'virtserialport,chardev=spicechannel0,name=com.redhat.spice.0'))
        params.extend(('-chardev', 'spicevmc,id=spicechannel0,name=vdagent'))

    if 'rtc' in config:
        if 'base' in config['rtc']:
            params.extend((
                '-rtc',
                'base={:s}'.format(config['rtc']['base'])))

    if 'option' in config:
        for opt in config['option']:
            params.extend(opt.split())

    if args.dry_run:
        print('qemu-system-x86_64', *params)
    else:
        os.execl('/usr/bin/qemu-system-x86_64', 'qemu-system-x86_64', *params)
